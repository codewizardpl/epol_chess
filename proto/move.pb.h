// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: move.proto

#ifndef PROTOBUF_move_2eproto__INCLUDED
#define PROTOBUF_move_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace chess {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_move_2eproto();
void protobuf_AssignDesc_move_2eproto();
void protobuf_ShutdownFile_move_2eproto();

class Move;

// ===================================================================

class Move : public ::google::protobuf::Message {
 public:
  Move();
  virtual ~Move();

  Move(const Move& from);

  inline Move& operator=(const Move& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Move& default_instance();

  void Swap(Move* other);

  // implements Message ----------------------------------------------

  Move* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Move& from);
  void MergeFrom(const Move& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string from = 1;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 1;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const char* value, size_t size);
  inline ::std::string* mutable_from();
  inline ::std::string* release_from();
  inline void set_allocated_from(::std::string* from);

  // required string to = 2;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 2;
  inline const ::std::string& to() const;
  inline void set_to(const ::std::string& value);
  inline void set_to(const char* value);
  inline void set_to(const char* value, size_t size);
  inline ::std::string* mutable_to();
  inline ::std::string* release_to();
  inline void set_allocated_to(::std::string* to);

  // @@protoc_insertion_point(class_scope:chess.Move)
 private:
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_to();
  inline void clear_has_to();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* from_;
  ::std::string* to_;
  friend void  protobuf_AddDesc_move_2eproto();
  friend void protobuf_AssignDesc_move_2eproto();
  friend void protobuf_ShutdownFile_move_2eproto();

  void InitAsDefaultInstance();
  static Move* default_instance_;
};
// ===================================================================


// ===================================================================

// Move

// required string from = 1;
inline bool Move::has_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Move::set_has_from() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Move::clear_has_from() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Move::clear_from() {
  if (from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_->clear();
  }
  clear_has_from();
}
inline const ::std::string& Move::from() const {
  // @@protoc_insertion_point(field_get:chess.Move.from)
  return *from_;
}
inline void Move::set_from(const ::std::string& value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_ = new ::std::string;
  }
  from_->assign(value);
  // @@protoc_insertion_point(field_set:chess.Move.from)
}
inline void Move::set_from(const char* value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_ = new ::std::string;
  }
  from_->assign(value);
  // @@protoc_insertion_point(field_set_char:chess.Move.from)
}
inline void Move::set_from(const char* value, size_t size) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chess.Move.from)
}
inline ::std::string* Move::mutable_from() {
  set_has_from();
  if (from_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chess.Move.from)
  return from_;
}
inline ::std::string* Move::release_from() {
  clear_has_from();
  if (from_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = from_;
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Move::set_allocated_from(::std::string* from) {
  if (from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_;
  }
  if (from) {
    set_has_from();
    from_ = from;
  } else {
    clear_has_from();
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chess.Move.from)
}

// required string to = 2;
inline bool Move::has_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Move::set_has_to() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Move::clear_has_to() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Move::clear_to() {
  if (to_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_->clear();
  }
  clear_has_to();
}
inline const ::std::string& Move::to() const {
  // @@protoc_insertion_point(field_get:chess.Move.to)
  return *to_;
}
inline void Move::set_to(const ::std::string& value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_ = new ::std::string;
  }
  to_->assign(value);
  // @@protoc_insertion_point(field_set:chess.Move.to)
}
inline void Move::set_to(const char* value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_ = new ::std::string;
  }
  to_->assign(value);
  // @@protoc_insertion_point(field_set_char:chess.Move.to)
}
inline void Move::set_to(const char* value, size_t size) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_ = new ::std::string;
  }
  to_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chess.Move.to)
}
inline ::std::string* Move::mutable_to() {
  set_has_to();
  if (to_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chess.Move.to)
  return to_;
}
inline ::std::string* Move::release_to() {
  clear_has_to();
  if (to_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = to_;
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Move::set_allocated_to(::std::string* to) {
  if (to_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete to_;
  }
  if (to) {
    set_has_to();
    to_ = to;
  } else {
    clear_has_to();
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chess.Move.to)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chess

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_move_2eproto__INCLUDED
